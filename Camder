// 캠더 (Camder)
// 창업프로젝트 1 
// 컴퓨터공학과 2학년 202011444 정은빈 
// ~ 2021.12.02 개발 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string.h> 
#include <windows.h>

void show_main();
void add_main();
void add_schedule();
void today_s_schedule();
void add_d_day();
void manage_main();
void search_schedule();
void change_schedule();
void delete_schedule();
void statistics_main();
void print_time();
void print_d_day();
void sorting_schedule();
int getTotalLine(char *name);
long cal_d_day(int y, int m, int d);
int convert_string(const void *a, const void *b);
void add_day_statistics();
void add_month_statistics();

// 메인화면 UI
void show_main() {
	FILE *dd;
	dd = fopen("d_day.txt", "r");
	int choice_num, i;
	
	printf("\n"); 
	printf("-------------------------캠더-------------------------\n");

	if (dd != NULL)
		print_d_day();
		
	printf("\n"); 
	printf("----------------------2021년 12월---------------------\n\n");
	printf("    Sun   Mon   Tue   Wed   Thu   Fri   Sat \n\n");
	printf("                        1     2     3     4  \n");
	printf("      5     6     7     8     9    10    11 \n");
	printf("     12    13    14    15    16    17    18 \n");
	printf("     19    20    21    22    23    24    25 \n");
	printf("     26    27    28    29    30    31       \n\n");
	printf("------------------------------------------------------\n");
	print_time(); 
	printf("------------------------------------------------------\n");

	today_s_schedule();
		
	printf("------------------------------------------------------\n");
	printf("1. 일정 입력		< 일정, 디데이 입력 >\n\n");
	printf("2. 일정 관리		< 일정 출력, 검색, 수정, 삭제 >\n\n");
	printf("3. 통     계		< 일별 통계,  월별 통계 >\n\n\n"); 
	printf("0. 프로그램 종료\n");
	printf("------------------------------------------------------\n");
	printf("메뉴를 선택하세요 >> ");
	scanf("%d", &choice_num);

	switch(choice_num) {
    	case 0:
			exit(1);
			system("cls");
        	break;
        case 1:
        	system("cls");
        	add_main();
        	break;
        case 2:
        	system("cls");
        	manage_main();
        	break;
		case 3:
			system("cls");
			statistics_main();
			break;
  		default:
			printf("잘못된 입력입니다.");
			exit(1);
	}
} 

// 현재 날짜 구하기 
void print_time() {
	int year, month, day;
	
	time_t t = time(NULL);
	struct tm tm = *localtime(&t);
	year = tm.tm_year+1900;
	month =  tm.tm_mon+1;
	day = tm.tm_mday;
	
	printf("               * %d년 %d월 %d일 일정 *\n", year, month, day);
} 

// 오늘 일정 검색 & 출력 
void today_s_schedule() {
	FILE *fp = NULL;
	char str[100];
	int count = 0;
	int num = 0;
	char year, month, day;
	
	time_t t = time(NULL);
	struct tm tm = *localtime(&t);
	year = tm.tm_year+1900;
	month =  tm.tm_mon+1;
	day = tm.tm_mday;
	
	char answer[100] = "2021-12-02";

	fp = fopen("sorted_schedule.txt", "r");
	printf("\n");
	while(1) {
		fgets(str, 100, fp);
		if(feof(fp)) break;
			if(strstr(str, answer)!=NULL) {
				printf("- %s\n", str);
				count++;
			}
	}

	if(count == 0) {
		printf("- 일정이 없습니다.\n\n");
	}
	fclose(fp); 
}

// 일정 입력 메인 화면 
void add_main() {
	int choice_num;
	
	printf("\n"); 
	printf("---------------------  일정 입력  ---------------------\n");
	printf("1. 일정 입력\n\n");
	printf("2. 디데이 입력\n\n\n");
	printf("입력할 메뉴를 선택하세요 >> ");
	scanf("%d", &choice_num);
	printf("-------------------------------------------------------\n");
	
	switch(choice_num) {
		case 1:
			add_schedule();
			break;
		case 2:
			add_d_day();
			break;
		default:
			printf("잘못된 입력입니다.");
			exit(1);
	}

	sorting_schedule();
	printf("------------------------------------------------------\n");
	printf("1. 메인 화면\n\n");
	printf("2. 일정 관리		< 일정 출력, 검색, 수정, 삭제 >\n\n");
	printf("3. 통     계		< 일별 통계,  월별 통계 >\n\n\n"); 
	printf("0. 프로그램 종료\n");
	printf("------------------------------------------------------\n");
	printf("메뉴를 선택하세요 >> ");
	scanf("%d", &choice_num);
	
	switch(choice_num) {
	   	case 0:
			exit(1);
			system("cls");
	    	break;
	    case 1: 
	    	system("cls");
			show_main();
	    	break;
	   	case 2:
			system("cls");
	        manage_main();
	        break;
		case 3:
			system("cls");
			statistics_main();
			break;
	  	default:
			printf("잘못된 입력입니다.");
			exit(1);
	}
}

// 일정 입력 함수 
void add_schedule() {
	FILE *fp;
	
	int choice_num, year, month, day, importance; 
	char title[20], category[20], memo[20], answer; 
	
	fp = fopen("add_schedule.txt", "a");
	
	printf("* 카테고리_제목_날짜(yyyy mm dd)_중요도(3)_세부사항 순으로 입력 : ");
	scanf("%s %s %d %d %d %d %s", &category, &title, &year, &month, &day, &importance, &memo);
	fprintf(fp, "%d-%02d-%02d [%s] %s(%d)_%s\n", year, month, day, category, title, importance, memo);
	printf("------------------------------------------------------\n");
	printf("%d-%02d-%02d [%s] %s(%d)_%s\n", year, month, day, category, title, importance, memo);

	fclose(fp);
}  

int convert_string(const void *a, const void *b)
{
    return strcmp((char *)a, (char *)b);
}

// 텍스트 파일 라인 수 구하기 
int getTotalLine(char *name){
	FILE *fp;
	int line=0;
	char c;
	
	fp=fopen(name,"r");
	
	while((c=fgetc(fp))!=EOF)
		if(c=='\n') line++;
	fclose(fp);
	
	return line;
}

// 일정 정렬 
void sorting_schedule() {
	FILE *fp = NULL;
	FILE *op = NULL;
	
	int numOfLine = 0;
	numOfLine = getTotalLine("add_schedule.txt");
	fp = fopen("add_schedule.txt", "r");
	char arr[numOfLine][100];
	char str[100];
	int i = 0, count = 0;
	
	if (fp == NULL) {
		printf("파일 열기에 실패하였습니다.");
		exit(1); 
	}
	
	while(1) {
		fgets(str, 100, fp);
		if(feof(fp)) break;
		strcpy(arr[i], str);
			i++;
	}
	
	op = fopen("sorted_schedule.txt", "w");
	
	if (op == NULL) {
		printf("파일 열기에 실패하였습니다.");
		exit(1); 
	}
	qsort(arr, sizeof(arr)/sizeof(arr[0]), sizeof(arr[0]), convert_string);
	
	for(count = 0; count < i; count++) {
		fprintf(op, "%s", arr[count]);
	}
	fclose(fp);
	fclose(op);
}

// 디데이 입력 함수 
void add_d_day() {
	FILE *fp;
   
	int year_t, month_t, day_t;
	int year, month, day, answer, left_day, choice_num;
	char title[20];
   
	time_t t = time(NULL);
	struct tm tm = *localtime(&t);
	
	year_t = tm.tm_year+1900;
	month_t =  tm.tm_mon+1;
	day_t = tm.tm_mday;
   
	fp = fopen("d_day.txt", "w");
   
	printf("* 제목, 날짜(yyyymmdd) 입력 : ");
	scanf("%s %d %d %d", &title, &year, &month, &day); 
   
	left_day = cal_d_day(year, month, day) - cal_d_day(year_t, month_t, day_t);
	
	printf("------------------------------------------------------\n");
	printf("* D-%d %s\n", left_day, title);
	fprintf(fp, " * D-%d %s", left_day, title);
	
	fclose(fp);
}

// 디데이 계산 함수 
long cal_d_day(int y, int m, int d) {
	int months[] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
	int i;
	long total = 0L;
	
	total = (y - 1) * 365L + (y - 1) / 4 - (y - 1) / 100 + (y - 1) / 400;
	
	if (!(y % 4) && y % 100 || !(y % 400))
		months[1]++;
		
	for (i = 0; i < m - 1; i++)
		total += months[i];

	total += d;
	return total;
}

// 디데이 출력 함수 
void print_d_day() {	
	FILE *dd;
	dd = fopen("d_day.txt", "r");
	char ch = 0;
	
    while(1)
    {
        ch = fgetc(dd); //한 문자를 읽기 
        if(feof(dd))//파일의 끝을 만나면 
        {
            return;
        }
        putchar(ch);
    }
}

// 일정 출력 함수 
void print_schedule() {	
	FILE *fp = NULL;
	char str[100], answer[100];
	int count = 0;
	int num = 0;
	
	fp = fopen("sorted_schedule.txt", "r");
	
	if (fp == NULL) {
		printf("파일 열기에 실패하였습니다.");
		exit(1); 
	}
	printf("\n");
	while(1) {
		num++;
		fgets(str, 100, fp);
		if(feof(fp)) break;
			printf("* %d. %s\n", num, str);
			count++;
	}
	if(count == 0) {
		printf("일정이 존재하지 않습니다.\n\n");
	}
	fclose(fp); 
}

// 일정 관리 메인 화면 
void manage_main() {
	
	int choice_num;
	
	printf("\n"); 
	printf("---------------------  일정 관리  ---------------------\n");
	printf("1. 일정 출력\n\n");
	printf("2. 일정 검색\n\n");
	printf("3. 일정 수정\n\n");
	printf("4. 일정 삭제 \n\n\n");
	printf("일정 관리 메뉴를 선택하세요 >> ");
	scanf("%d", &choice_num);
	printf("-------------------------------------------------------\n");

	if (choice_num == 1)
		print_schedule();
	else if(choice_num == 2) 
		search_schedule();
	else if(choice_num == 3)
		change_schedule();
	else if(choice_num == 4)
		delete_schedule(); 
	else
		printf("잘못된 입력입니다.");

	sorting_schedule();

	printf("-------------------------------------------------------\n");
	printf("1. 메인 화면\n\n");
	printf("2. 일정 입력		< 일정, 디데이 입력>\n\n");
	printf("3. 통     계		< 일별 통계,  월별 통계 >\n\n\n"); 
	printf("0. 프로그램 종료\n");
	printf("------------------------------------------------------\n");

	printf("메뉴를 선택하세요 >> ");
	scanf("%d", &choice_num);
	
	switch(choice_num) {
	   	case 0:
			exit(1);
			system("cls");
        	break;
        case 1: 
        	system("cls");
        	show_main();
        	break;
        case 2:
        	system("cls");
        	add_main();
        	break;
		case 3:
			system("cls");
			statistics_main();
			break;
  		default:
			printf("잘못된 입력입니다.");
	}
}

// 일정 검색 
void search_schedule() {
	FILE *fp = NULL;
	char str[100], answer[100];
	int count = 0;
	int num = 0;
	
	printf("검색할 일정을 입력하세요 : ");
	scanf("%s", &answer);
	printf("-------------------------------------------------------\n\n"); 
	
	fp = fopen("sorted_schedule.txt", "r");
	if (fp == NULL) {
		printf("파일 열기에 실패하였습니다.");
		exit(1); 
	}

	while(1) {
		num++;
		fgets(str, 100, fp);
		if(feof(fp)) break;
			if(strstr(str, answer)!=NULL) {
				printf("* %d. %s\n", num, str);
				count++;
			}
	}

	if(count == 0) {
		printf("해당 일정은 존재하지 않습니다.\n\n");
	}
	fclose(fp); 
}
// 일정 수정 함수 
void change_schedule() {
	FILE *fptr1, *fptr2;
    char file1[] ="sorted_schedule.txt";
    char file2[] ="add_schedule.txt";
    char curr, answer;
    int del, line_number = 0;
    
    search_schedule();

	printf("-------------------------------------------------------\n\n"); 
    printf("수정하고자 하는 일정의 맨 앞 숫자를 입력해주세요 : ");
    scanf("%d", &del);
	printf("\n-------------------------------------------------------\n"); 

    fptr1 = fopen(file1,"r");
    fptr2 = fopen(file2, "w");
    curr = getc(fptr1);
    
    if(curr!=EOF) {line_number =1;}
    
    while(1){
      if(del != line_number)
        putc(curr, fptr2);
        curr = getc(fptr1);
        if(curr =='\n') line_number++;
        if(curr == EOF) break;
    }
    
    fclose(fptr1);
    fclose(fptr2);
    
    sorting_schedule();
    
    add_schedule(); 
    
    printf("------------------------------------------------------\n");
    printf("- 일정이 수정되었습니다.\n");	

} 

// 일정 삭제 함수 
void delete_schedule() {
	FILE *fptr1, *fptr2;
    char file1[] ="sorted_schedule.txt";
    char file2[] ="add_schedule.txt";
    char curr, answer;
    int del, line_number = 0;
    
    search_schedule();

	printf("-------------------------------------------------------\n"); 
    printf("삭제하고자 하는 일정의 맨 앞 숫자를 입력해주세요 : ");
    scanf("%d", &del);

    fptr1 = fopen(file1,"r");
    fptr2 = fopen(file2, "w");
    curr = getc(fptr1);
    
    if(curr!=EOF) {line_number =1;}
    
    while(1){
      if(del != line_number)
        putc(curr, fptr2);
        curr = getc(fptr1);
        if(curr =='\n') line_number++;
        if(curr == EOF) break;
    }
    
    fclose(fptr1);
    fclose(fptr2);
    
    sorting_schedule();
    
    printf("------------------------------------------------------\n");
    printf("- 일정이 삭제되었습니다.\n");	
} 

// 통계 함수 
void statistics_main() {
	
	int choice_num, check_month, check_day;
	char answer;
	
	printf("\n"); 
	printf("---------------------   통   계   ---------------------\n");
	printf("1. 일별 통계\n\n");
	printf("2. 월별 통계\n\n\n");

	printf("통계 검색 방법을 선택하세요 >> ");
	scanf("%d", &choice_num);
	printf("-------------------------------------------------------\n");
	
	switch(choice_num) {
		case 1:
			add_day_statistics();
			break;
		case 2:
			add_month_statistics();
			break;
		default:
			printf("잘못된 입력입니다.");
			exit(1);                      
	}
	
	printf("-------------------------------------------------------\n\n");
	printf("1. 메인 화면\n\n");
	printf("2. 일정 입력		< 일정, 디데이 입력 >\n\n");
	printf("3. 일정 관리		< 일정 출력, 검색, 수정, 삭제 >\n\n\n"); 
	printf("0. 프로그램 종료\n");
	printf("------------------------------------------------------\n");

	printf("메뉴를 선택하세요 >> ");
	scanf("%d", &choice_num);
		
	switch(choice_num) {
	   	case 0:
			exit(1);
			system("cls");
        	break;
        case 1:
        	system("cls");
        	show_main();
        	break;
        case 2:
        	system("cls");
        	add_main();
        	break;
		case 3:
			system("cls");
			manage_main();
			break;
  		default:
			printf("잘못된 입력입니다.");
			exit(1);
	}
	
	
} 

// 일별 통계 입력 함수 
void add_day_statistics() {
	FILE *fp = NULL;
	char str[100];
	int count = 0;
	int num = 0;
	int goal_num = 0;
	int i, year, month, day, bunmo, percent;
	
	printf("통계를 확인할 일을 입력하세요(yyyy mm dd) : ");
	scanf("%d %d %d", &year, &month, &day);
	
	char answer[100] = "2021-12-01";

	fp = fopen("sorted_schedule.txt", "r");
	printf("\n");
	
	while(1) {
		num++;
		fgets(str, 100, fp);
		if(feof(fp)) break;
			if(strstr(str, answer)!=NULL) {
				printf("- %s\n", str);
				count++;
			}
	}

	if(count == 0) {
		printf("- 일정이 없습니다.\n\n");
	}
	fclose(fp); 
	
	printf("------------------------------------------------------\n");
	printf("완료한 일정 개수를 입력하세요 : ");
	scanf("%d", &goal_num);
	printf("------------------------------------------------------\n\n");

	bunmo = 100 / count;

	count *= bunmo;
	goal_num *= bunmo;

	percent = goal_num;
	percent /= 10;


	printf("- %d년 %02d월 %02d일 통계\n\n", year, month, day);
	
	for(i = 0; i < percent; i++)
		printf("★");
	
	for(i = 0; i < 10-percent; i++)
		printf("☆");
		
	printf("    <%d%% 달성>\n", percent*10); 

}


// 일별 통계 입력 함수 
void add_month_statistics() {
	FILE *fp = NULL;
	char str[100];
	int count = 0;
	int num = 0;
	int goal_num = 0;
	int i, year, month, day, bunmo, percent;
	
	printf("통계를 확인할 월을 입력하세요(yyyy mm) : ");
	scanf("%d %d", &year, &month);
	
	char answer[100] = "2021-12";

	fp = fopen("sorted_schedule.txt", "r");
	printf("\n");
	
	while(1) {
		num++;
		fgets(str, 100, fp);
		if(feof(fp)) break;
			if(strstr(str, answer)!=NULL) {
				printf("- %s\n", str);
				count++;
			}
	}

	if(count == 0) {
		printf("- 일정이 없습니다.\n\n");
	}
	fclose(fp); 
	
	printf("------------------------------------------------------\n");
	printf("완료한 일정 개수를 입력하세요 : ");
	scanf("%d", &goal_num);
	printf("------------------------------------------------------\n\n");

	bunmo = 100 / count;

	count *= bunmo;
	goal_num *= bunmo;

	percent = goal_num;
	percent /= 10;


	printf("- %d년 %02d월 통계\n\n", year, month);
	
	for(i = 0; i < percent; i++)
		printf("★");
	
	for(i = 0; i < 10-percent; i++)
		printf("☆");
		
	printf("    <%d%% 달성>\n", percent*10); 

}

int main(void) {
	
	show_main();
	
	return 0;
}
